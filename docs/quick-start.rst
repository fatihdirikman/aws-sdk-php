===========
Quick Start
===========

Executing Commands
------------------

You can quickly get up and running by using a web service client's factory method to instantiate clients as needed.

.. code-block:: php

    <?php

    // Include the SDK using the Composer autoloader
    require 'vendor/autoload.php';

    use Aws\DynamoDb\DynamoDbClient;
    use Aws\Common\Enum\Region;

    // Instantiate the DynamoDB client with your AWS credentials and desired AWS region
    $client = DynamoDbClient::factory(array(
        'key'    => 'your-aws-access-key-id',
        'secret' => 'your-aws-secret-access-key',
        'region' => Region::US_WEST_2
    ));

    $table = 'posts';

    // Create a "posts" table
    $result = $client->createTable(array(
        'TableName' => $table,
        'KeySchema' => array(
            'HashKeyElement' => array(
                'AttributeName' => 'slug',
                'AttributeType' => 'S'
            )
        ),
        'ProvisionedThroughput' => array(
            'ReadCapacityUnits'  => 10,
            'WriteCapacityUnits' => 5
        )
    ));

    // Wait until the table is created and active
    $client->waitUntil('TableExists', $table);

    echo "The {$table} table has been created.\n";

**Note:** Instantiating a client without providing credentials causes the client to attempt to retrieve `IAM Instance
Profile credentials
<http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/UsingIAM.html#UsingIAMrolesWithAmazonEC2Instances>`_.

Like the `CreateTable` operation in the preceding example, every service operation (or "command") accepts an associative
array of parameters as an argument.

The ``createTable()`` method doesn't actually exist on the client. It is implemented using the ``__call()`` magic method
of the client and acts as a shortcut.

.. code-block:: php

    // The "shortcut" syntax via __call
    $result = $client->createTable(array(/* ... */));

    // The "full" syntax
    $command = $client->getCommand('CreateTable', array(/* ... */));
    $result = $command->getResult();

Using the "full" syntax, the return value is a ``Command`` object, which encapsulates the request and response of the
HTTP request to AWS. From the ``Command`` object, you can call the ``getResult()`` method (as in the preceding example)
or the ``execute()`` method to get the parsed result. Additionally, you can call the ``getRequest()`` and
``getResponse()`` methods to get information about the request and response, respectively (e.g., the status code or the
raw response, headers sent in the request, etc.).

The ``Command`` object supports a chainable syntax and can also be useful when you want to manipulate the request before
execution.

.. code-block:: php

    $result = $client->getCommand('ListTables')
        ->set('Limit', 5)
        ->set('ExclusiveStartTableName', 'some-table-name')
        ->getResult();

It also allows for executing multiple commands in parallel.

.. code-block:: php

    $ops = array();
    $ops[] = $client->getCommand('DescribeTable', array('TableName' => 'my-table-1'));
    $ops[] = $client->getCommand('DescribeTable', array('TableName' => 'my-table-2'));
    $client->execute($ops);

Using the Service Builder
-------------------------

When using the SDK, you have the option to use individual factory methods for each client or the ``Aws\Common\Aws``
class to build your clients. The ``Aws\Common\Aws`` class is a service builder and dependency injection container for
the SDK and is the recommended way for instantiating clients. The service builder allows you to share configuration
options between multiple services and pre-wires short service names with the appropriate client class.

The following example shows how to use the service builder to retrieve a ``Aws\DynamoDb\DynamoDbClient`` and perform the
``GetItem`` operation using the command syntax.

Passing an associative array of parameters as the first or second argument of ``Aws\Common\Aws::factory()`` treats the
parameters as shared across all clients generated by the builder. In the example, we tell the service builder to use the
same credentials for every client.

.. note::

    Unlike the prior SDK, service clients throw exceptions for failed requests. Be sure to use ``try`` and ``catch``
    as appropriate.

.. code-block:: php

    <?php

    require 'vendor/autoload.php';

    use Aws\Common\Aws;
    use Aws\Common\Enum\Region;
    use Aws\DynamoDb\Exception\DynamoDbException;

    // Create a service building using shared credentials for each service
    $aws = Aws::factory(array(
        'key'    => 'your-aws-access-key-id',
        'secret' => 'your-aws-secret-access-key',
        'region' => Region::US_WEST_2
    ));

    // Retrieve the DynamoDB client by its short name from the service builder
    $client = $aws->get('dynamodb');

    // Get an item from the "posts"
    try {
        $result = $client->getItem(array(
            'TableName' => 'posts',
            'Key' => $client->formatAttributes(array(
                'HashKeyElement' => 'using-dynamodb-with-the-php-sdk'
            )),
            'ConsistentRead' => true
        ));

        print_r($result['Item']);
    } catch (DynamoDbException $e) {
        echo 'The item could not be retrieved.';
    }

Passing an associative array of parameters to the first or second argument of ``Aws\Common\Aws::factory()`` will treat
the parameters as shared parameters across all clients generated by the builder. In the above example, we are telling
the service builder to use the same credentials for every client.
