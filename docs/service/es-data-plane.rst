======================================================
Signing an Amazon Elasticsearch Service Search Request
======================================================

Amazon Elasticsearch Service (Amazon ES) is a managed service that makes it easy
to deploy, operate, and scale Elasticsearch, a popular open-source search and
analytics engine. Amazon ES offers direct access to the Elasticsearch API,
meaning that developers can use the tools with which they’re familiar, as well
as robust security options, such as using IAM users and roles for access
control. Most Elasticsearch clients, however, were written before Amazon ES was
launched and do not support AWS request signing out of the box. Using the SDK's
built in credential providers and signers, however, you can sign arbitrary PSR-7
requests generated by any client.

Signing an Amazon ES Request
----------------------------

Amazon ES uses `Signature Version 4 <http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html>`_,
which means that you will need to sign requests against the service's signing
name (``es``, in this case) and the region of your Amazon ES domain. A full list
of regions supported by Amazon ES can be found `on AWS's Regions and Endpoints
page <http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions>`_,
but in this sample, I'll be signing requests against an Amazon ES domain in the
``us-west-2`` region.

You'll need to provide credentials, which can be done either with the SDK's
default provider chain or any any form of credentials described in
:doc:`../guide/credentials`, as well as a `PSR-7 request
<http://docs.aws.amazon.com/aws-sdk-php/v3/api/class-Psr.Http.Message.RequestInterface.html>`_
(assumed in the code below to be named ``$psr7Request``):

.. code-block:: php

    // Pull credentials from the default provider chain
    $provider = Aws\Credentials\CredentialProvider::defaultProvider();
    $credentials = call_user_func($provider)->wait();

    // Create a signer with the service's signing name and region
    $signer = new Aws\Signature\SignatureV4('es', 'us-west-2');

    // Sign your request
    $signedRequest = $signer->signRequest($psr7Request, $credentials);

Writing a Signing Handler for Elasticsearch-PHP
-----------------------------------------------

The `official Elasticsearch PHP client
<https://github.com/elastic/elasticsearch-php>`_ allows users to supply a custom
HTTP handler to its ``ClientBuilder`` class. This handler is a ``callable`` that
accepts as request array and returns a response array as an instance of
``GuzzleHttp\Ring\Future\FutureArrayInterface``. You might recognize this
signature as a `RingPHP handler
<http://ringphp.readthedocs.org/en/latest/spec.html#handlers>`_, which is what
Elasticsearch-PHP uses by default.

One wrinkle: the host header Elasticsearch-PHP includes in the RingPHP array
includes the port number, even when the host is listening to HTTP on port 80 or
HTTPS on port 443, as Amazon ES does. Retaining the port number for a standard
port in the host header will result in an invalid signature, so be sure to strip
it out before creating a PSR-7 request.

.. code-block:: php

    use Aws;
    use Aws\Credentials\CredentialProvider;
    use Aws\Signature\SignatureV4;
    use Elasticsearch\ClientBuilder;
    use GuzzleHttp\Ring\Future\CompletedFutureArray;
    use GuzzleHttp\Psr7\Request;
    use GuzzleHttp\Psr7\Uri;
    use Psr\Http\Message\ResponseInterface;

    $psr7Handler = Aws\default_http_handler();
    $signer = new SignatureV4('es', 'us-west-2');
    $credentialProvider = CredentialProvider::defaultProvider();

    // Construct the handler that will be used by Elasticsearch-PHP
    $handler = function (array $request) use (
        $psr7Handler,
        $signer,
        $credentialProvider
    ) {
        // Amazon ES listens on standard ports (443 for HTTPS, 80 for HTTP).
        $request['headers']['host'][0]
            = parse_url($request['headers']['host'][0], PHP_URL_HOST);

        // Create a PSR-7 request from the array passed to the handler
        $psr7Request = new Request(
            $request['http_method'],
            (new Uri($request['uri']))
                ->withScheme($request['scheme'])
                ->withHost($request['headers']['host'][0]),
            $request['headers'],
            $request['body']
        );

        // Sign the PSR-7 request with credentials from the environment
        $signedRequest = $signer->signRequest(
            $psr7Request,
            call_user_func($credentialProvider)->wait()
        );

        // Send the signed request to Amazon ES
        /** @var ResponseInterface $response */
        $response = $psr7Handler($signedRequest)->wait();

        // Convert the PSR-7 response to a RingPHP response
        return new CompletedFutureArray([
            'status' => $response->getStatusCode(),
            'headers' => $response->getHeaders(),
            'body' => $response->getBody()->detach(),
            'transfer_stats' => ['total_time' => 0],
            'effective_url' => (string) $psr7Request->getUri(),
        ]);
    };

    // Use the \Elasticsearch\ClientBuilder class to inject the handler into a
    // new Elasticsearch-PHP client:
    $client = ClientBuilder::create()
        ->setHandler($handler)
        ->setHosts(['https://<your-amazon-es-domain>:443'])
        ->build();

.. important::

    Make sure to specify which port to communicate with (443 for HTTPS or 80 for
    HTTP); otherwise, Elasticsearch-PHP will assume you want to contact port
    9200, which is the Elasticsearch server’s default setting.

    Make sure also to strip the port number from the host header provided by
    Elasticsearch-PHP in the RingPHP array (this is done in the code sample
    above). Retaining the port number for a standard port in the host header
    will result in an invalid signature, and Amazon ES listens to HTTP on port
    80 and HTTPS on port 443.

From there, you can use the ``$client`` object just as you would any other
Elasticsearch-PHP client. For more information, see `the Elasticsearch website
<https://www.elastic.co/guide/en/elasticsearch/client/php-api/2.0/index.html>`_.
