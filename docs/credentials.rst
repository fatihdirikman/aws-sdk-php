Providing Credentials to the SDK
================================

Introduction
------------

In order to authenticate requests, AWS services require you to provide your
`AWS access keys <http://aws.amazon.com/developers/access-keys/>`_, also known
as your AWS **access key ID** and **secret access key**. In the AWS SDK for
PHP, these access keys are often referred to collectively as your
**credentials**. This guide demonstrates how to provide your credentials to
the AWS SDK for SDK.

There are many ways to provide credentials:

#. :ref:`environment_credentials`
#. :ref:`instance_profile_credentials`
#. :ref:`factory_credentials`
#. :ref:`temporary_credentials`

Which technique should you choose?
----------------------------------

The technique that you use to provide credentials to the SDK for your
application is entirely up to you. Please read each section on this page to
determine what is the best fit for you. What you choose will depend on many
different factors, including:

* The environment you are operating in (e.g., development, testing, production)
* The host of your application (e.g., localhost, Amazon EC2, third-party server)
* How many sets of credentials you are using
* The type of project you are developing (e.g., application, CLI, library)
* How often you rotate your credentials
* If you rely on temporary or federated credentials
* Your deployment process
* Your application framework

Regardless of the technique used, it is encouraged that you follow the
`IAM Best Practices <http://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html>`_
when managing your credentials, including the recommendation to not use your
AWS account's root credentials. Instead, create separate IAM users with their
own access keys for each project, and tailor the permissions of the users
specific to those projects.

*In general, it is recommended that you use IAM roles when running your
application on Amazon EC2 and use environment variables elsewhere.*

.. _environment_credentials:

Using credentials from environment variables
--------------------------------------------

If you do not provide credentials to a client object at the time of its
instantiation (e.g., via the client's factory method or via a service builder
configuration), the SDK will attempt to find credentials in your environment
when you call your first operation. The SDK will use PHP's ``getenv()`` function
to retrieve environment variables, looking for the ``AWS_ACCESS_KEY_ID`` and
``AWS_SECRET_KEY`` environment variables. These credentials are often called
**environment credentials**.

If you are hosting your application on `AWS Elastic Beanstalk
<http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_PHP_eb.html>`_,
you can set the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_KEY`` environment
variables on the AWS Elastic Beanstalk console so that the SDK can use those
credentials automatically.

.. _instance_profile_credentials:

Using IAM roles for Amazon EC2 instances
----------------------------------------

*Using IAM roles is the preferred technique for providing credentials to
applications running on Amazon EC2.* IAM roles remove the need to worry about
credential management from your application. They allow an instance to "assume"
a role by retrieving temporary credentials from the EC2 instance's metadata
server. These temporary credentials, often referred to as **instance profile
credentials**, allow access to the actions and resources that the role's policy
allows.

When launching an EC2 instance, you can choose to associate it with an IAM
role. Any application running on that EC2 instance is then allowed to assume
the associated role. Amazon EC2 handles all the legwork of securely
authenticating instances to the IAM service to assume the role and periodically
refreshing the retrieved role credentials, keeping your application secure with
almost no work on your part.

If you do not explicitly provide credentials to the client object and no
environment variable credentials are available, the SDK attempts to retrieve
instance profile credentials from an Amazon EC2 instance metadata server. These
credentials are available only when running on Amazon EC2 instances that have
been configured with an IAM role.

.. note::

    Instance profile credentials and other temporary credentials generated by
    the AWS Security Token Service (AWS STS) are not supported by every
    service. Please check if the service you are using supports temporary
    credentials by reading `AWS Services that Support AWS STS <http://docs.aws.amazon.com/STS/latest/UsingSTS/UsingTokens.html>`_.

For more information, see `IAM Roles for Amazon EC2 <http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html>`_.

.. _hardcoded_credentials:

Setting credentials explicitly in your code
-------------------------------------------

The SDK allows you to explicitly set your credentials in your project in a few
different ways. These techniques are useful for rapid development, integrating
with existing configurations systems (e.g., your PHP framework of choice), and
handling :ref:`temporary credentials <temporary_credentials>`. However,
**be careful to not hard-code your credentials** inside of your applications.
Hard-coding your credentials can be dangerous, because it is easy to
accidentally commit your credentials into an SCM repository, potentially
exposing your credentials to more people than intended. It can also make it
difficult to rotate credentials in the future.

.. _factory_credentials:

Passing credentials into a client factory method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A simple way to specify your credentials is by injecting them directly into
the factory method when instantiating the client object.

.. code-block:: php

    <?php

    use Aws\S3\S3Client;

    // Instantiate the S3 client with your AWS credentials
    $s3Client = S3Client::factory([
        'key'    => 'YOUR_AWS_ACCESS_KEY_ID',
        'secret' => 'YOUR_AWS_SECRET_ACCESS_KEY',
    ]);

In some cases, you may already have an instance of a ``Credentials`` object.
You can use this instead of specifying your access keys separately.

.. code-block:: php

    <?php

    use Aws\S3\S3Client;
    use Aws\Common\Credentials\Credentials;

    $credentials = new Credentials('YOUR_ACCESS_KEY', 'YOUR_SECRET_KEY');

    // Instantiate the S3 client with your AWS credentials
    $s3Client = S3Client::factory([
        'credentials' => $credentials
    ]);

You may also want to read the section in the Getting Started Guide about
:ref:`using a client's factory method <client_factory_method>` for more details.

.. _temporary_credentials:

Using temporary credentials from AWS STS
----------------------------------------

`AWS Security Token Service <http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html>`_
(AWS STS) enables you to request limited-privilege, **temporary credentials**
for AWS IAM users or for users that you authenticate via identity federation.
One common use case for using temporary credentials is to grant mobile or
client-side applications access to AWS resources by authenticating users
through third-party identity providers (read more about `Web Identity Federation
<http://docs.aws.amazon.com/STS/latest/UsingSTS/CreatingWIF.html>`_).

.. note::

    Temporary credentials generated by AWS STS are not supported by every
    service. Please check if the service you are using supports temporary
    credentials by reading `AWS Services that Support AWS STS
    <http://docs.aws.amazon.com/STS/latest/UsingSTS/UsingTokens.html>`_.

Getting temporary credentials
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

AWS STS has several operations that return temporary credentials, but the
``GetSessionToken`` operation is the simplest for demonstration purposes.
Assuming you have an instance of ``Aws\Sts\StsClient`` stored in the
``$stsClient`` variable, this is how you call it:

.. code-block:: php

    $result = $stsClient->getSessionToken();

The result for ``GetSessionToken`` and the other AWS STS operations always
contains a ``'Credentials'`` value. If you print the result (e.g.,
``print_r($result)``), it looks like the following:

::

    Array
    (
        ...
        [Credentials] => Array
        (
            [SessionToken] => '<base64 encoded session token value>'
            [SecretAccessKey] => '<temporary secret access key value>'
            [Expiration] => 2013-11-01T01:57:52Z
            [AccessKeyId] => '<temporary access key value>'
        )
        ...
    )

Providing temporary credentials to the SDK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use temporary credentials with another AWS client by instantiating the
client and passing in the values received from AWS STS directly.

.. code-block:: php

    use Aws\S3\S3Client;

    $result = $stsClient->getSessionToken();

    $s3Client = S3Client::factory([
        'key'    => $result['Credentials']['AccessKeyId'],
        'secret' => $result['Credentials']['SecretAccessKey'],
        'token'  => $result['Credentials']['SessionToken'],
    ]);

You can also construct a ``Credentials`` object and use that when instantiating
the client.

.. code-block:: php

    use Aws\Common\Credentials\Credentials;
    use Aws\S3\S3Client;

    $result = $stsClient->getSessionToken();

    $credentials = new Credentials(
        $result['Credentials']['AccessKeyId'],
        $result['Credentials']['SecretAccessKey'],
        $result['Credentials']['SessionToken']
    );

    $s3Client = S3Client::factory(['credentials' => $credentials]);

However, the *best* way to provide temporary credentials is to use the
``createCredentials()`` helper method included with the ``StsClient``. This
method extracts the data from an AWS STS result and creates the ``Credentials``
object for you.

.. code-block:: php

    $result = $stsClient->getSessionToken();
    $credentials = $stsClient->createCredentials($result);

    $s3Client = S3Client::factory(['credentials' => $credentials]);

For more information about why you might need to use temporary credentials in
your application or project, see
`Scenarios for Granting Temporary Access <http://docs.aws.amazon.com/STS/latest/UsingSTS/STSUseCases.html>`_
in the AWS STS documentation.
